fill=Metric...System)) + geom_bar()
plot(metrics)
fix(metrics)
fix(metrics)
source('~/.active-rstudio-document', echo=TRUE)
View(local_agg_output)
pct <- as.data.frame(prop.table(as.matrix(local_agg[,2:ncol(local_agg)]),2))
colnames(pct) <- paste("percentage of", colnames(pct), sep=": ")
name_vec <- names(local_agg)[1]
for (i in 1:ncol(pct))
{
name_vec <- c(name_vec, names(local_agg)[2:ncol(local_agg)][i], names(pct)[i])
}
local_agg_output <- cbind(local_agg,pct)
local_agg_output <- local_agg_output[,name_vec]
local_agg_output["Total", 2:ncol(local_agg_output)] <- colSums(local_agg_output[, 2:ncol(local_agg_output)])
local_agg_output[,"Metric...System"] <- as.character(local_agg_output[,"Metric...System"])
local_agg_output[5, "Metric...System"] <- "Total"
rownames(local_agg_output) <- NULL
write.csv(local_agg_output, "local_agg_output.csv", row.names=F)
View(local_agg_output)
dir()
setwd(mainDir)
ls()
BinSummaryEqualHH
library(spatstat)
library(maptools)
library(sp)
library(rgdal)
install.packages(c("colorspace", "data.table", "dichromat", "digest", "foreign", "ggplot2", "gtable", "KernSmooth", "lattice", "MASS", "Matrix", "nlme", "plyr", "proto", "reshape2", "rpart", "scales", "survival"))
install.packages(c("colorspace", "data.table", "dichromat", "digest",
''
library("sp", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:rgdal", unload=TRUE)
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:stats", unload=TRUE)
library("stats", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:sp", unload=TRUE)
library("sp", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
library("maptools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
library("PBSmapping", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:PBSmapping", unload=TRUE)
detach("package:maptools", unload=TRUE)
library("maptools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
library("PBSmapping", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
scrape_WB_country_data <- function(CODE)
{
#build URL string with appropriate country code to pull World Bank database from
country.db <- read.xls(str_c('http://api.worldbank.org/datafiles/',CODE,'_Country_MetaData_en_EXCEL.xls'), sheet=1)
#subset country database of interest to only pull indicators of interest with for year 2009
short <- country.db[country.db$Indicator.Code %in% (c('EG.ELC.ACCS.ZS',
'EG.ELC.PROD.KH',
'EG.USE.ELEC.KH',
'EG.USE.ELEC.KH.PC',
'SP.POP.TOTL',
'EN.POP.DNST',
'NY.GDP.MKTP.CD',
'NY.GDP.MKTP.KD.ZG',
'SI.POV.GINI',
'SI.POV.GAP2',
'SI.POV.GAPS',
'SI.POV.NAGP',
'SI.POV.RUGP',
'SI.POV.URGP'
)),]
return(short)
}
#Ghana Data
gha <- scrape_WB_country_data('GHA')
scrape_WB_country_data <- function(CODE)
{
#build URL string with appropriate country code to pull World Bank database from
country.db <- read.xls(str_c('http://api.worldbank.org/datafiles/',CODE,'_Country_MetaData_en_EXCEL.xls'), sheet=1)
#subset country database of interest to only pull indicators of interest with for year 2009
short <- country.db[country.db$Indicator.Code %in% (c('EG.ELC.ACCS.ZS',
'EG.ELC.PROD.KH',
'EG.USE.ELEC.KH',
'EG.USE.ELEC.KH.PC',
'SP.POP.TOTL',
'EN.POP.DNST',
'NY.GDP.MKTP.CD',
'NY.GDP.MKTP.KD.ZG',
'SI.POV.GINI',
'SI.POV.GAP2',
'SI.POV.GAPS',
'SI.POV.NAGP',
'SI.POV.RUGP',
'SI.POV.URGP'
)),]
return(short)
}
gha <- scrape_WB_country_data('GHA')
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
gha <- scrape_WB_country_data('GHA')
library(gdata)
library(stringr)
gha <- scrape_WB_country_data('GHA')
View(gha)
library("landsat", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
image()
image(july)
image(july1)
image(july3)
data(july3)
data(july)
data(july1)
data('july1')
july(1)
july
data(nov1)
detach("package:landsat", unload=TRUE)
library("landsat", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
image(july)
image(july1)
data(nov1)
image(nov1)
data(july)
data(july1)
image(july1)
july.shift <- georef(nov3, july3, maxdist = 50)
data(nov3)
july.shift <- georef(nov3, july3, maxdist = 50)
data(july3)
july.shift <- georef(nov3, july3, maxdist = 50)
image(july.shift)
### Ethiopia topsoil nutrient compositions & archetype classification
# M. Walsh, J. Chen & S. Ahamed, Sep. 2013
### Set local working directory, e.g.
dat_dir <- "/Users/markuswalsh/Documents/Ethiopia/Analyses"
setwd(dat_dir)
### Load packages
# install.packages(c("archetypes","compositions","raster","rgdal","arm"), dependencies=T)
require(archetypes)
require(compositions)
require(raster)
require(rgdal)
require(arm)
### Load the latest ET point/profile data and cultivated area predictions
download.file("ftp://ciesinftp:!Secure9@csnproj.ciesin.columbia.edu/AfSISSept2013/Woreda_data.zip", "Woreda_data.zip", mode="wb")
unzip("Woreda_data.zip", overwrite=T)
download.file("ftp://ciesinftp:!Secure9@csnproj.ciesin.columbia.edu/AfSISSept2013/ET_CMA_pred.zip", "ET_CMA_pred.zip", mode="wb")
unzip("ET_CMA_pred.zip", overwrite=T)
samp <- read.table("Samples.csv", header=T, sep=",")
prof <- read.table("Profiles.csv", header=T, sep=",")
wordat <- merge(prof, samp, by="PID")
### Define grid "coordinate reference system" (CRS)
coordinates(wordat) = ~Lon+Lat
proj4string(wordat) = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
wordat.laea <- spTransform(wordat, CRS=CRS("+proj=laea +ellps=WGS84 +lat_0=5 +lon_0=20 +no_defs"))
coordnames(wordat.laea)<- c("x","y")
### Grid overlay loop
grid.list <- c("CMA_prob.tif", "CMA_se.tif")
for (i in 1:length(grid.list)){
print(paste("extracting", grid.list[i]))
grid.cov <- raster(grid.list[i])
wordat.laea@data[strsplit(grid.list[i], split=".tif")[[1]]] <- extract(
x = grid.cov,
y = wordat.laea,
method = "simple")
}
vars <- c("Woreda","x","y","CMA_prob","P","S","K","Ca","Mg","Fe","B","Mn","Zn","Cu")
wordat <- as.data.frame(wordat.laea)
wordat <- na.omit(wordat[vars])
### Soil nutrient compositions and "isometric log ratio" (ilr) transformations
# note that all of the Mehlich-3 nutrient concentrations are in mg/kg units
nutrients <- c("P","S","K","Ca","Mg","Fe","B","Mn","Zn","Cu")
cdata <- wordat[nutrients]
# Binary partition for ilr transformations in order of [nutrients]
bpart <- t(matrix(c(-1,-1,-1,-1,-1, 1, 1, 1, 1, 1,
-1,-1, 1, 1, 1, 0, 0, 0, 0, 0,
-1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1,-1,-1, 0, 0, 0, 0, 0,
0, 0, 0, 1,-1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1,-1,-1,-1,-1,
0, 0, 0, 0, 0, 0,-1, 1,-1,-1,
0, 0, 0, 0, 0, 0, 1, 0,-1,-1,
0, 0, 0, 0, 0, 0, 0, 0,-1, 1), ncol=10, nrow=9, byrow=T))
# Plot of ilr nutrient balances (mobile & fulcrum plot)
CoDaDendrogram(X=acomp(cdata), signary=bpart)
# Calculate ilr transformations of the point data
idata <- as.data.frame(ilr(acomp(cdata), V=bpart))
wordat <- cbind(wordat, idata)
### Identification of archetypes / endmembers
# note that this step takes ~15-20 min to run
adims <- c("CMA_prob","V1","V2","V3","V4","V5","V6","V7","V8","V9")
adata <- wordat[adims]
set.seed(090913)
adata.arc <- stepArchetypes(data=adata, k=1:12, nrep=5, verbose=F)
screeplot(adata.arc)
# Select no. of archetypes, screeplot & model diagnostics suggest k=8 archetypes
adata.arc8 <- bestModel(adata.arc[[8]])
t(parameters(adata.arc8))
# Classify ilr's by "dominant archetypes" (DA's)
arc <- predict(adata.arc8, adata)
DA <- apply(arc, 1, which.max)
wordat <- cbind(wordat, DA)
### Tables of DA occurrences and DA's cross-tabulated by Woreda's
table(wordat$DA)/length(wordat$DA)
table(wordat$Woreda, wordat$DA)
### Write file
write.csv(wordat, "wordat.csv")
### Generate DA prediction map
# Load the latest topsoil spatial predictions
download.file("ftp://ciesinftp:!Secure9@csnproj.ciesin.columbia.edu/AfSISSept2013/ET_pred_grids.zip", "ET_pred_grids.zip", mode="wb")
unzip("ET_pred_grids.zip", overwrite=T)
### Map predicted DA's
grid.list <- c("CMA_prob.tif","P.tif","S.tif","K.tif","Ca.tif","Mg.tif","Fe.tif","B.tif","Mn.tif","Zn.tif","Cu.tif")
grids <- readGDAL(grid.list[1])
names(grids)[1] <- sub(".tif", "", grid.list[1])
for (i in grid.list[-1]) {
grids@data[sub(".tif", "", i[1])] <- readGDAL(paste(i))$band1
}
dagrid <- na.omit(as.data.frame(grids))
# Calculate ilr transformations & classify DA's based on spatial prediction grids
cgrid <- dagrid[nutrients]
igrid <- as.data.frame(ilr(acomp(cdata), V=bpart))
dagrid <- cbind(dagrid, igrid)
agrid <- dagrid[adims]
pred.arc <- predict(adata.arc8, agrid)
dagrid$DA <- apply(pred.arc, 1, which.max)
# Output map
da_map <- SpatialPixelsDataFrame(points=dagrid[c("x","y")], data=dagrid, proj4string=CRS("+proj=laea +ellps=WGS84 +lat_0=5 +lon_0=20 +no_defs"))
writeGDAL(data=da_map["DA"], fname="DA.tif", drivername="GTiff", type="Byte", mvFlag=0)
### Example GLMM's for post-stratification
# e.g., Mehlich-3 P < Pdef ppm, indicative of P-deficient soils
Pdef <- 15
wordat$Pdef <- ifelse(wordat$P < Pdef, 1, 0)
pdef.glmer <- lmer(Pdef~1+(1|DA), family=binomial(link="logit"), data=wordat)
display(pdef.glmer)
pdef.coef <- coef(pdef.glmer)
pdef.se <- se.coef(pdef.glmer)
coefplot(pdef.coef$DA[,1], pdef.se$DA[,1], varnames=rownames(pdef.coef$DA), xlim=c(-6,6), CI=2, cex.var=1, cex.pts=1.3, main="")
# e.g., Mehlich-3 S < Sdef ppm, indicative of S-deficient soils
Sdef <- 10
wordat$Sdef <- ifelse(wordat$S < Sdef, 1, 0)
sdef.glmer <- lmer(Sdef~1+(1|DA), family=binomial(link="logit"), data=wordat)
display(sdef.glmer)
sdef.coef <- coef(sdef.glmer)
sdef.se <- se.coef(sdef.glmer)
coefplot(sdef.coef$DA[,1], sdef.se$DA[,1], varnames=rownames(sdef.coef$DA), xlim=c(-6,6), CI=2, cex.var=1, cex.pts=1.3, main="")
# e.g., Mehlich-3 K < Kdef ppm, indicative of K-deficient soils
Kdef <- 120
wordat$Kdef <- ifelse(wordat$K < Kdef, 1, 0)
kdef.glmer <- lmer(Kdef~1+(1|DA), family=binomial(link="logit"), data=wordat)
display(kdef.glmer)
kdef.coef <- coef(kdef.glmer)
kdef.se <- se.coef(kdef.glmer)
coefplot(kdef.coef$DA[,1], kdef.se$DA[,1], varnames=rownames(kdef.coef$DA), xlim=c(-6,6), CI=2, cex.var=1, cex.pts=1.3, main="")
### Post-stratification estimates
# Function inputs: lmer model object (M), and stratum weights (i.e., "proportional areas" = str_wgt)
str_wgt <- table(dagrid$DA)/length(dagrid$DA)
post_str_est <- function(M, str_wgt) {
post_mean <- sum(coef(M)[[1]]*str_wgt)
post_se <- sqrt(sum((t((se.coef(M)$fixef)^2 + (se.coef(M)[[2]])^2))*t(str_wgt^2)))
post_pred <- exp(post_mean)/(1+exp(post_mean))
post_lower <- exp(post_mean-2*post_se)/(1+exp(post_mean-2*post_se))
post_upper <- exp(post_mean+2*post_se)/(1+exp(post_mean+2*post_se))
return(list(post_pred = post_pred, lower = post_lower, upper = post_upper))
}
# Summaries for soil property cut-off values
post_str_est(pdef.glmer, str_wgt)
post_str_est(sdef.glmer, str_wgt)
post_str_est(kdef.glmer, str_wgt)
#sort NetworkPlanner's "grid" settlements nodes based on a global priority scheme
scrape_WB_country_data <- function(CODE)
{
#build URL string with appropriate country code to pull World Bank database from
country.db <- read.xls(str_c('http://api.worldbank.org/datafiles/',CODE,'_Country_MetaData_en_EXCEL.xls'), sheet=1)
#subset country database of interest to only pull indicators of interest with for year 2009
short <- country.db[country.db$Indicator.Code %in% (c('SP.POP.GROW', ##Population growth (annual %)
'SP.POP.TOTL', #Population, total
'EG.USE.COMM.GD.PP.KD', #Energy use (kg of oil equivalent) per $1,000 GDP (constant 2005 PPP)
'EG.USE.COMM.KT.OE', #Energy use (kt of oil equivalent)
'NY.GDP.MKTP.PP.CD', #GDP, PPP (current international $)
'NY.GDP.PCAP.PP.CD' #GDP per capita, PPP (current international $)
)),]
return(short)
}
#South Africa
zaf <- scrape_WB_country_data('ZAF')
scrape_WB_country_data <- function(CODE)
{
#build URL string with appropriate country code to pull World Bank database from
country.db <- read.xls(str_c('http://api.worldbank.org/datafiles/',CODE,'_Country_MetaData_en_EXCEL.xls'), sheet=1)
#subset country database of interest to only pull indicators of interest with for year 2009
short <- country.db[country.db$Indicator.Code %in% (c('SP.POP.GROW', ##Population growth (annual %)
'SP.POP.TOTL', #Population, total
'EG.USE.COMM.GD.PP.KD', #Energy use (kg of oil equivalent) per $1,000 GDP (constant 2005 PPP)
'EG.USE.COMM.KT.OE', #Energy use (kt of oil equivalent)
'NY.GDP.MKTP.PP.CD', #GDP, PPP (current international $)
'NY.GDP.PCAP.PP.CD' #GDP per capita, PPP (current international $)
)),]
return(short)
}
#South Africa
zaf <- scrape_WB_country_data('ZAF')
library(gdata)
library(stringr)
library(gdata)
rm(list=ls())
library(plyr)
library(ggplot2)
library(sp)
update.packages(checkBuilt=TRUE)
library(plyr)
library(ggplot2)
library(sp)
library(rgeos)
library(geosphere)
library(rgeos)
library(geosphere)
library("geosphere", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
detach("package:geosphere", unload=TRUE)
library("geosphere", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages('codetools')
library(geosphere)
update.packages()
library(geosphere)
update.packages(checkBuilt = TRUE, ask = FALSE)
library(geosphere)
detach("package:geosphere", unload=TRUE)
library("geosphere", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
require(gdata)
require(plyr)
require(stringr)
require(data.table)
require(ggplot2)
require(grid)
require(maptools)
require(stats)
source('~/github/local/network-planner/IDN-analysis/PostProcessing/interpret_commonfunctions.R')
##Jonathan's directory
setwd("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/")
malukuutara <- read.csv("564-MalukuUtara-900HHD/metrics-local.csv", stringsAsFactors=F)
source('~/github/local/network-planner/IDN-analysis/PostProcessing/interpret_commonfunctions.R')
##Jonathan's directory
setwd("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/")
###Downloads
#setwd("~/Downloads/IDN_Analysis_Sample_Data/")
###LOAD THAT DATA RIGHT UP###
# #Import metrics local for each island areas in the analysis
# #metrics local is the key output file of each Network Planner scenario capturing nodal level information
# maluku <- read.csv("565-Maluku-900HHD/metrics-local.csv", skip=1,stringsAsFactors=F)
# flores <- read.csv("567-FloresBarat-900HHD/metrics-local.csv", skip=1,stringsAsFactors=F)
malukuutara <- read.csv("564-MalukuUtara-900HHD/metrics-local.csv", stringsAsFactors=F)
# sumba <- read.csv("563-Sumba-900HHD/metrics-local.csv", skip=1,stringsAsFactors=F)
# sumba_ranked <- read.csv("563-Sumba-900HHD/metrics-local-grid_with_rollout_sequence.csv", stringsAsFactors=F)
# sumba_ranked <- merge(x=sumba, y=sumba_ranked, by = "Name")
# timor <- read.csv("566-Kupang-900HHD/metrics-local.csv", skip=1,stringsAsFactors=F)
# flores_timu <- read.csv("568-FloresTimu-900HHD/metrics-local.csv", skip=1,stringsAsFactors=F)
## Import proposed networks for interpeting new network, this is the NP minimum spanning tree
##Prabhas' function imports both shapefile line  types in one go and merges them, useful...
malukuutara_path <- load.polylines("564-MalukuUtara-900HHD/")
# maluku_proposed2 <- load.polylines("565-Maluku-900HHD/networks-proposed.shp")
# flores_proposed <- load.polylines("567-FloresBarat-900HHD/networks-proposed.shp")
malukuutara_proposed <- load.polylines("564-MalukuUtara-900HHD/networks-proposed.shp")
# sumba_proposed <- load.polylines("563-Sumba-900HHD/networks-proposed.shp")
# timor_proposed <- load.polylines("566-Kupang-900HHD/networks-proposed.shp")
#
# #Import Existing networks for interpeting previous network
# maluku_existing <- load.polylines("565-Maluku-900HHD/networks-existing.shp")
# flores_existing <- load.polylines("567-FloresBarat-900HHD/networks-existing.shp")
malukuutara_existing <- load.polylines("564-MalukuUtara-900HHD/networks-existing.shp")
# sumba_existing <- load.polylines("563-Sumba-900HHD/networks-existing.shp")
# timor_existing <- load.polylines("566-Kupang-900HHD/networks-existing.shp")
#
# #Import Metrics Gloabl stuff too,
# maluku_global <- load.global(read.csv("565-Maluku-900HHD/metrics-global.csv",stringsAsFactors=F))
# flores_global <- load.global(read.csv("567-FloresBarat-900HHD/metrics-global.csv",stringsAsFactors=F))
malukuutara_global <- load.global(read.csv("564-MalukuUtara-900HHD/metrics-global.csv",stringsAsFactors=F))
# sumba_global <- load.global(read.csv("563-Sumba-900HHD/metrics-global.csv",stringsAsFactors=F))
# timor_global <- load.global(read.csv("566-Kupang-900HHD/metrics-global.csv",stringsAsFactors=F))
# flore_timu_global <- load.global(read.csv("568-FloresTimu-900HHD/metrics-global.csv",stringsAsFactors=F))
#
# #DESA POLYGONS
# #Now, let's incorporate some polygon shapefile polygons for background and references
#
# ##typMaluku Polygons
# maluku_polygon <- readShapePoly("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPinputs/Dec2013-Preprocessing/Shapefiles/Maluku_with_Census_Data_+_PLN_Areas.shp")
# #now let's make it more ggplottable and keep any attribute data
# maluku_polygon@data$id <- rownames(maluku_polygon@data)
# maluku_polygon <- merge(maluku_polygon@data, fortify(maluku_polygon), by = 'id')
#
# #NTT Polygons
# ntt_polygon <- readShapePoly("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPinputs/Dec2013-Preprocessing/Shapefiles/NTT_with_Census_Data_+_PLN_Areas.shp")
# #now let's make it more ggplottable and keep any attribute data
# ntt_polygon@data$id <- rownames(ntt_polygon@data)
# ntt_polygon <- merge(ntt_polygon@data, fortify(ntt_polygon), by = 'id')
#
# #Maluku Utara Polygons
malukuutara_polygon <- readShapePoly("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPinputs/Dec2013-Preprocessing/Shapefiles/Maluku_Utara_with_Census_Data_+_PLN_Areas.shp")
#now let's make it more ggplottable and keep any attribute data
malukuutara_polygon@data$id <- rownames(malukuutara_polygon@data)
malukuutara_polygon <- merge(malukuutara_polygon@data, fortify(malukuutara_polygon), by = 'id')
##Maluku Utara - all bells and whistles.  This is a comprehensive plot of information for which we can subtract/add more information in the future.
#Thanks @prabhasp!
#First, define more useful population catgories
malukuutara_polygon$PopulationBin <- factor(quantile(malukuutara_polygon$population, probs = c(.2, .4, .6, .8, 1), na.rm=T))
levels(malukuutara_polygon$PopulationBin) <- c("1","2","3","4","5")
#and the plot with multi-level data identified
malukuutara_plot <- ggplot() +
geom_polygon(data = malukuutara_polygon, aes(x=long,y=lat, group=group, fill=PopulationBin), alpha=0.5) +
scale_fill_brewer(type="seq", palette="YlOrBr") +
geom_point(data=malukuutara, aes(x = X, y = Y, colour = Metric...System, shape = Xy_source)) +
scale_shape_manual(values=c(20, 11), labels=c("BIG", "BPS")) +
scale_color_manual(values = c("#2b83ba", "#d7191c", "#abdda4", "#ffffbf"), labels=c("Grid", "Mini Grid", "Off Grid", "Unelectrified")) +
geom_path(data=malukuutara_path,
aes(x=long, y=lat, group=group, linetype=MVLineType, size=MVLineType), color='blue') +
scale_size_manual(values=c(.5,1.5)) + scale_linetype_manual(values=c("solid", "dotted")) +
labs(title = "NetworkPlanner Outputs - Maluku Utara", x = "Longitude", y="Latitude", color = "Electrification Tech.", shape = "Settlement Data Source") +
coord_equal(ylim=c(-1,2.75), xlim=c(127,129))
malukuutara_plot
source('~/github/local/network-planner/Prioritized/NetworkPlanner_SystemRollout_Greedy.R')
source('~/github/local/network-planner/Prioritized/Custom_Rollout_Functions.R')
# ##Github directory
setwd("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/571-Sumba-900HHD-21pkWh/")
##1.0 - Import metrics.local for only grid-proposed nodes -> local.grid
#load metrics.local to associated settlement points with proposed grid data
local <- read.csv("metrics-local.csv", skip=1) #RUNTIME ~ 00:28 mins
local$Settlement.id <- rownames(local) #use generic row names for unique ID of each unique settlement point
#proposed <- readShapeLines("networks-proposed.shp") #RUNTIME ~ 00:08 mins
proj4 <- read.csv("metrics-local.csv", nrows=1, header = FALSE)
#Merge existing and proposed networks for interpeting pipeline network
proposed <- readShapeLines("networks-proposed.shp")
#proposed <- sumba_proposed
## ensure FID is unqiue
proposed$FID <- row.names(proposed)
#Use output of priortized.grid function as input to far-sighted optimized rollout algorithim
#takes a shapefile (network) and csv (nodal descriptions and weights)
#and suggests a sequential, phased roll-out of the system based on a greedy, one step ahead view
#***RUNTIME ~08:00***********
greedy.grid <- prioritized.grid.greedy(local,proposed)
##***************************
#Explicitly define greedy grid output as a dataframe
greedy.grid <- as.data.frame(greedy.grid[1])
#Function to determine downstream summations for greedy grid
greedy.grid.cummulatives <- downstream.sum.calculator(greedy.grid)
##Phasing, Rollout and Costs
#Edwin likes to keep all the metrics local data together, so reconnect it by unique Name field
mu_ranked <- merge(x=malukuutara, y=greedy.grid.cummulatives, all.x=T, by = "Name")
#Order the suggested grid path by optimal sequence
mu_ranked <- mu_ranked[order(mu_ranked$sequence),]
#That lets us develop Phase bins
mu_ranked$Phase <- NA
phase_increment_house <- sum(mu_ranked$Demand..household....Target.household.count.x)
total_phases <- 5
for (i in 1:total_phases){
lower_cutoff <- (i-1)/total_phases*phase_increment_house
upper_cutoff <- i/total_phases*phase_increment_house
mu_ranked$Phase[which((mu_ranked$CummulativeHousesConnected.qty >= lower_cutoff) &
(mu_ranked$CummulativeHousesConnected.qty <= upper_cutoff))] <- i
}
malukuutara_ranked_plot <- ggplot() +
#geom_polygon(data = malukuutara_polygon, aes(x=long,y=lat, group=group, fill=PopulationBin), alpha=0.5) +
# scale_fill_brewer(type="seq", palette="YlOrBr") +
geom_point(data=mu_ranked, aes(x = X, y = Y, colour = Phase)) +
scale_fill_brewer(type="seq", palette="YlGnBu") +
labs(title = "Maluku Utara - Suggest Grid Rollout", x = "Longitude", y="Latitude", color = "Electrification Sequence") +
coord_equal(ylim=c(-1,2.75), xlim=c(127,129))
malukuutara_ranked_plot
table(mu_ranked$Phase)
View(mu_ranked$Phase)
View(mu_ranked$sequence)
local <- malukuutara
local$Settlement.id <- rownames(local) #use generic row names for unique ID of each unique settlement point
setwd("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/571-Sumba-900HHD-21pkWh/")
proj4 <- read.csv("metrics-local.csv", nrows=1, header = FALSE)
malukuutara_proposed <- load.polylines("564-MalukuUtara-900HHD/networks-proposed.shp")
malukuutara_proposed <- load.polylines("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/564-MalukuUtara-900HHD/networks-proposed.shp")
malukuutara_proposed <-readShapeLines("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/564-MalukuUtara-900HHD/networks-proposed.shp")
proposed <- malukuutara_proposed
proposed$FID <- row.names(proposed)
greedy.grid <- prioritized.grid.greedy(local,proposed)
local <- malukuutara
local$Settlement.id <- rownames(local) #use generic row names for unique ID of each unique settlement point
greedy.grid <- prioritized.grid.greedy(local,proposed)
local <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/564-MalukuUtara-900HHD/metrics-local.csv")
local$Settlement.id <- rownames(local) #use generic row names for unique ID of each unique settlement point
proposed$FID <- row.names(proposed)
greedy.grid <- prioritized.grid.greedy(local,proposed)
local <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/563-Sumba-900HHD/metrics-local.csv")
local <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/564-MalukuUtara-900HHD/metrics-local.csv" stringsAsFactors=F)
local <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/564-MalukuUtara-900HHD/metrics-local.csv", stringsAsFactors=F)
local$Settlement.id <- rownames(local) #use generic row names for unique ID of each unique settlement point
malukuutara_proposed <-readShapeLines("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPoutputs/January-2014/564-MalukuUtara-900HHD/networks-proposed.shp")
proposed <- malukuutara_proposed
proposed$FID <- row.names(proposed)
greedy.grid <- prioritized.grid.greedy(local,proposed)
temp <- read.csv("~/Downloads/56/56-metrics-local.csv", skip=1)
colnames(temp)
table(temp$System..mini.grid....Available.system.capacities..diesel.generator.)
table(temp$System..mini.grid....Diesel.generator.actual.system.capacity)
temp2 <- read.csv("~/Downloads/57/57-metrics-local.csv", skip=1)
colnames(temp2)
table(temp2$System..mini.grid....Diesel.generator.actual.system.capacity)
table(temp2$System..mini.grid....Generation.actual.system.capacity)
table(temp$System..mini.grid....Diesel.generator.actual.system.capacity)
table(temp$System..mini.grid....Available.system.capacities..diesel.generator.)
table(temp2$System..mini.grid....Available.power.generation.system.capacities.kw.)
setwd('~/github/local/network-planner/IDN-analysis/Preprocessing/')
MalukuUtara_Census <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/BPS/BPS_Processing/Maluku_Utara_with_Census_Data.csv")
sum(MalukuUtara_Census$PLN_HHOLD)
sum(MalukuUtara_Census$NUM_HHOLDS)
sum(MalukuUtara_Census$PLN_HHOLD)/sum(MalukuUtara_Census$NUM_HHOLDS)
sum(MalukuUtara_Census$PCT_PLN*MalukuUtara_Census$NUM_HHOLDS)
115152/214542
sum(MalukuUtara_Census$NUM_HHOLDS)
houses_connected_at_start <- (sum(mu_ranked$Full_population/mu_ranked$Ho_size) - sum(mu_ranked$Demographics...Projected.household.count.x))
houses_connected_at_start
total_houses <- sum(mu_ranked$Full_population/mu_ranked$Ho_size)
total_houses
