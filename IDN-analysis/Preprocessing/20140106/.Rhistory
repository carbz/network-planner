row.names(desa_gap_fillers) <- desa_gap_fillers$Clust_Code
table(duplicated(desa_gap_fillers))
table(unique(desa_gap_fillers))
View(unique(desa_gap_fillers))
View((desa_gap_fillers))
desa_gap_fillers <- unique(desa_gap_fillers)
row.names(desa_gap_fillers) <- desa_gap_fillers$Clust_Code
desa_gap_fillers$Longitude <- all_centroids$Longitude[which(all_centroids$IDSP2010==desa_gap_fillers$IDSP2010)]
all_centroids$Clust_Code <- str_c(all_centroids$IDSP2010,"99")
for (i in 1:5){print(desa_gap_fillers[i])}
View(desa_gap_fillers)
desa_gap_fillers[4]
typeof(desa_gap_fillers)
desa_gap_fillers = as.data.frame(desa_gap_fillers)
desa_gap_fillers[4]
typeof(desa_gap_fillers)
View(desa_gap_fillers)
desa_gap_fillers[537102000999]
desa_gap_fillers[537102000999,]
row.names(desa_gap_fillers) <- desa_gap_fillers$Clust_Code
desa_gap_fillers[537102000999,]
desa_gap_fillers$Longitude <- NA
desa_gap_fillers$Latitude <-NA
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- (all_centroids[cluster_code, "Longitude")
}
desa_gap_fillers[4,"Clust_Code"]
cluster_code
desa_gap_fillers[4,"Longitude"]
all_centroids[537101000799, "Longitude"]
View(all_centroids)
row.names(all_centroids) <- all_centroids$Clust_Code
all_centroids <- unique(all_centroids)
row.names(all_centroids) <- all_centroids$Clust_Code
View(unique(all_centroids$Clust_Code))
View((all_centroids$Clust_Code))
View(unique(all_centroids))
all_centroids <- unique(all_centroids)
View(!(unique(all_centroids$Clust_Code)))
View(duplicated(all_centroids$Clust_Code))
View(all_centroids(which[duplicated(all_centroids$Clust_Code),]))
View(all_centroids(which[duplicated(all_centroids$Clust_Code)]))
View(all_centroids[which(duplicated(all_centroids$Clust_Code))])
View(all_centroids[which(duplicated(all_centroids$Clust_Code),)])
View(all_centroids[which(duplicated(all_centroids$Clust_Code)),])
View(all_centroids[530901001299,])
View(all_centroids["530901001299",])
View(all_centroids['530901001299',])
desa_gap_fillers[530901001299,]
desa_gap_fillers['530901001299',]
desa_gap_fillers["530901001299",]
desa_gap_fillers[5,]
cluster_code <- desa_gap_fillers[5,"Clust_Code"]
cluster_code
desa_gap_fillers[cluster_code,]
all_centroids[cluster_code,]
all_centroids <- unique(all_centroids)
row.names(all_centroids) <- all_centroids$Clust_Code
all_centroids <- rbind.fill(as.data.frame(NTT_Centroids),
as.data.frame(Maluku_Centroids),
as.data.frame(MalukuUtara_Centroids))
colnames(all_centroids)[35] <- "Longitude"
colnames(all_centroids)[36] <- "Latitude"
#Name column for unique cluster code for faster indexing
all_centroids$Clust_Code <- str_c(all_centroids$IDSP2010,"99")
View(all_centroids[which(all_centroids$Clust_Code %in% c(‘530901001299’, ‘810602002199’, ‘820306200199’, ‘820402200299’, ‘820506000199’)),])
View(all_centroids[which(all_centroids$Clust_Code %in% c(‘530901001299’, ‘810602002199’, ‘820306200199’, ‘820402200299’, ‘820506000199’),)])
View(all_centroids[which(all_centroids$Clust_Code %in% c(‘530901001299’, ‘810602002199’, ‘820306200199’, ‘820402200299’, ‘820506000199’)),])
all_centroids$Clust_Code %in% c(‘530901001299’, ‘810602002199’, ‘820306200199’, ‘820402200299’, ‘820506000199’))
all_centroids$Clust_Code %in% c(‘530901001299’, ‘810602002199’, ‘820306200199’, ‘820402200299’, ‘820506000199’)
all_centroids$Clust_Code %in% c(530901001299, 810602002199, 820306200199, 820402200299, 820506000199)
View(all_centroids[which(all_centroids$Clust_Code %in% c(530901001299, 810602002199, 820306200199, 820402200299, 820506000199)),])
multiple_centroid_desas <- all_centroids[which(all_centroids$Clust_Code %in% c(530901001299,
810602002199,
820306200199,
820402200299,
820506000199)),]
View(all_centroids[which(duplicated(all_centroids$Clust_Code)),])
View(all_centroids[which(!(all_centroids$Clust_Code %in% multiple_centroid_desas$Clust_Code)),])
View(all_centroids)
all_centroids <- all_centroids[which(!(all_centroids$Clust_Code %in% multiple_centroid_desas$Clust_Code)),]
row.names(all_centroids) <- all_centroids$Clust_Code
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude")]
}
nrow(desa_gap_fillers)
all_centroids[cluster_code,]
all_centroids[cluster_code,"Longitude"]
desa_gap_fillers[cluster_code,"Longitude"]
desa_gap_fillers[cluster_code,]
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude"]
}
View(desa_gap_fillers)
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude"]
desa_gap_fillers[i, "Latitude"] <- all_centroids[cluster_code, "Latitude"]
}
View(cluster_points)
View(desa_gap_fillers)
test <- rbind.fill(desa_gap_fillers, cluster_points)
View(test)
View(cluster_points)
test$ho_size <- test$DESA_POP/test$NUM_HHOLDS
test$pop <- test$CLUST_POP
View(test)
desa_gap_fillers <- subset(census_all, IDSP2010 %in% desa_gaps, c(cluster_column_names, "population"))
desa_gap_fillers$CLUST_POP <- desa_gap_fillers$population
desa_gap_fillers$DESA_POP <- desa_gap_fillers$population
desa_gap_fillers$pop <- cluster_points$CLUST_POP
desa_gap_fillers$ho_size <- cluster_points$DESA_POP/cluster_points$NUM_HHOLDS
test <- rbind.fill(desa_gap_fillers, cluster_points)
test$ho_size <- test$DESA_POP/test$NUM_HHOLDS
test$pop <- test$CLUST_POP
View(test)
dim(cluster_points
)
cluster_column_names <- colnames(cluster_points)[which(colnames(cluster_points) %in% colnames(census_all))]
desa_gap_fillers <- subset(census_all, IDSP2010 %in% desa_gaps, c(cluster_column_names, "population"))
desa_gap_fillers$CLUST_POP <- desa_gap_fillers$population
desa_gap_fillers$DESA_POP <- desa_gap_fillers$population
desa_gap_fillers$pop <- cluster_points$CLUST_POP
desa_gap_fillers$ho_size <- cluster_points$DESA_POP/cluster_points$NUM_HHOLDS
#3.2 Denote gap areas with special Cluster ID of XXX-99
desa_gap_fillers$Clust_Code <- str_c(desa_gap_fillers$IDSP2010,"99")
desa_gap_fillers <- unique(desa_gap_fillers) #getting read of duplicate value
row.names(desa_gap_fillers) <- desa_gap_fillers$Clust_Code
#3.3 Assign Centroids as X,Y for Desas with cluster info gaps
desa_gap_fillers$Longitude <- NA
desa_gap_fillers$Latitude <-NA
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude"]
desa_gap_fillers[i, "Latitude"] <- all_centroids[cluster_code, "Latitude"]
}
#4. Output one consolidated list of settlement location w/ pop & household data broken down by PLN geographic region
test <- rbind.fill(desa_gap_fillers, cluster_points)
test$ho_size <- test$DESA_POP/test$NUM_HHOLDS
test$pop <- test$CLUST_POP
View(test)
colnames(cluster_points)
colnames(all_centroids)
colnames(census_all)
table(colnames(all_centroids))
table(all_centroids$EI_SubArea)
desa_gap_fillers <- subset(census_all, IDSP2010 %in% desa_gaps, c(cluster_column_names, "population", "EI_SubArea"))
#Determine which census columns to carryover from census to cluster points
cluster_column_names <- colnames(cluster_points)[which(colnames(cluster_points) %in% colnames(census_all))]
desa_gap_fillers <- subset(census_all, IDSP2010 %in% desa_gaps, c(cluster_column_names, "population"))
#population is not further subdivided for desas without cluster information
desa_gap_fillers$CLUST_POP <- desa_gap_fillers$population
desa_gap_fillers$DESA_POP <- desa_gap_fillers$population
desa_gap_fillers$pop <- desa_gap_fillers$population
#preserve household size information at the per desa level
desa_gap_fillers$ho_size <- cluster_points$DESA_POP/cluster_points$NUM_HHOLDS
#3.2 Denote gap areas with special Cluster ID of XXX-99
desa_gap_fillers$Clust_Code <- str_c(desa_gap_fillers$IDSP2010,"99")
desa_gap_fillers <- unique(desa_gap_fillers) #getting read of duplicate value
row.names(desa_gap_fillers) <- desa_gap_fillers$Clust_Code
#3.3 Assign Centroids as X,Y for Desas with cluster info gaps
desa_gap_fillers$Longitude <- NA
desa_gap_fillers$Latitude <-NA
desa_gap_fillers$EI_SubArea <- NA
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude"]
desa_gap_fillers[i, "Latitude"] <- all_centroids[cluster_code, "Latitude"]
desa_gap_fillers[i, "EI_SubArea"] <- all_centroids[cluster_code, "EI_SubArea"]
}
test <- rbind.fill(desa_gap_fillers, cluster_points)
test$ho_size <- test$DESA_POP/test$NUM_HHOLDS
test$pop <- test$CLUST_POP
cluster_points$EI_SubArea <- NA
for (i in 1:nrow(cluster_points))
{
#assign the corresponding EI SubArea value
cluster_code <- cluster_points[i, "Clust_Code"]
cluster_points[i, "EI_SubArea"] <- all_centroids[cluster_code, "EI_SubArea"]
}
colnames(all_centroids)
colnames(cluster_points)
View(cluster_points)
rm(list=ls())
library(maptools)
require(plyr)
library(stringr)
library(ggplot2)
setwd("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPinputs/Dec2013-Preprocessing/")
##INPUTS
##I. Import Centroid shapefiles - BPS Provided
#will need to use these for Desa Villages where any settlement cluster data is absent
NTT_Centroids <- readShapePoints("Shapefiles/NTT_centroids.shp")
Maluku_Centroids <- readShapePoints("Shapefiles/Maluku-Desa_centroids.shp")
MalukuUtara_Centroids <- readShapePoints("Shapefiles/Maluku_Utara-Desa_centroids.shp")
all_centroids <- rbind.fill(as.data.frame(NTT_Centroids),
as.data.frame(Maluku_Centroids),
as.data.frame(MalukuUtara_Centroids))
#rename lat, long columns to better agree with NP nomenclature
colnames(all_centroids)[35] <- "Longitude"
colnames(all_centroids)[36] <- "Latitude"
#establish unique cluster code for faster indexing
all_centroids$Clust_Code <- str_c(all_centroids$IDSP2010,"99")
#Certain desas are composed of multipolygons
multiple_centroid_desas <- all_centroids[which(all_centroids$Clust_Code %in% c(530901001299,
810602002199,
820306200199,
820402200299,
820506000199)),]
#omit these areas for now because they're causing complications
all_centroids <- all_centroids[which(!(all_centroids$Clust_Code %in% multiple_centroid_desas$Clust_Code)),]
#Name column for unique cluster code for faster indexing
row.names(all_centroids) <- all_centroids$Clust_Code
##II. Settlemnt Areas via Landuse Maps - BIG
#Shaky's geospatial analysis reduces to cluster points where landuse maps identify settlement areas
cluster_points <- read.csv("cluster_points_NTT+MMU.csv", header = T)
##III. Import 2010 Census Data - BPS
NTT_Census <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/BPS/BPS_Processing/NTT_with_Census_Data.csv")
Maluku_Census <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/BPS/BPS_Processing/Maluku_with_Census_Data.csv")
MalukuUtara_Census <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/BPS/BPS_Processing/Maluku_Utara_with_Census_Data.csv")
#Approximate Settlement Locations
#1. Determine which Desas have cluster locations specified, where are the gaps?
desas_with_BIG_data <- unique(cluster_points$IDSP2010)
desa_list <- c(unique(NTT_Census$IDSP2010),
unique(Maluku_Census$IDSP2010),
unique(MalukuUtara_Census$IDSP2010))
desa_gaps <- setdiff(desa_list, desas_with_BIG_data)
#2. Of Specified cluster locations, apply pct % of census data to that location
#adjust for number of homes that already have a PLN connection
cluster_points$ho_size <- cluster_points$DESA_POP/cluster_points$NUM_HHOLDS
cluster_points$pop <- cluster_points$CLUST_POP
#3.1 Of gaps in cluster locations, apply 100% of census data to that location
census_all <- rbind.fill(NTT_Census,
Maluku_Census,
MalukuUtara_Census)
#Determine which census columns to carryover from census to cluster points
cluster_column_names <- colnames(cluster_points)[which(colnames(cluster_points) %in% colnames(census_all))]
desa_gap_fillers <- subset(census_all, IDSP2010 %in% desa_gaps, c(cluster_column_names, "population"))
#population is not further subdivided for desas without cluster information
desa_gap_fillers$CLUST_POP <- desa_gap_fillers$population
desa_gap_fillers$DESA_POP <- desa_gap_fillers$population
desa_gap_fillers$pop <- desa_gap_fillers$population
#preserve household size information at the per desa level
desa_gap_fillers$ho_size <- cluster_points$DESA_POP/cluster_points$NUM_HHOLDS
#3.2 Denote gap areas with special Cluster ID of XXX-99
desa_gap_fillers$Clust_Code <- str_c(desa_gap_fillers$IDSP2010,"99")
desa_gap_fillers <- unique(desa_gap_fillers) #getting read of duplicate value
row.names(desa_gap_fillers) <- desa_gap_fillers$Clust_Code
#3.3 Assign Centroids as X,Y for Desas with cluster info gaps
desa_gap_fillers$Longitude <- NA
desa_gap_fillers$Latitude <-NA
desa_gap_fillers$EI_SubArea <- NA
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude"]
desa_gap_fillers[i, "Latitude"] <- all_centroids[cluster_code, "Latitude"]
desa_gap_fillers[i, "EI_SubArea"] <- all_centroids[cluster_code, "EI_SubArea"]
}
colnames(all_centroids)
colnames(cluster_points)
cluster_points$EI_SubArea <- NA
cluster_code <- cluster_points[6, "Clust_Code"]
cluster_code
all_centroids[cluster_code, "EI_SubArea"]
typeof(all_centroids)
View(all_centroids)
all_centroids[cluster_code, "EI_Subarea"]
View(NTT_Centroids)
View(Maluku_Centroids
)
View(MalukuUtara_Centroids)
colnames(NTT_Centroids)
all_centroids <- rbind.fill(as.data.frame(NTT_Centroids),
as.data.frame(Maluku_Centroids),
as.data.frame(MalukuUtara_Centroids))
View(all_centroids)
NTT_Centroids <- as.data.frame(NTT_Centroids)
colnames(NTT_Centroids)
colnames(NTT_Centroids)[34] <- "EI_SubArea"
all_centroids <- rbind.fill(as.data.frame(NTT_Centroids),
as.data.frame(Maluku_Centroids),
as.data.frame(MalukuUtara_Centroids))
View(all_centroids)
colnames(all_centroids)
#rename lat, long columns to better agree with NP nomenclature
colnames(all_centroids)[35] <- "Longitude"
colnames(all_centroids)[36] <- "Latitude"
#establish unique cluster code for faster indexing
all_centroids$Clust_Code <- str_c(all_centroids$IDSP2010,"99")
multiple_centroid_desas <- all_centroids[which(all_centroids$Clust_Code %in% c(530901001299,
810602002199,
820306200199,
820402200299,
820506000199)),]
all_centroids <- all_centroids[which(!(all_centroids$Clust_Code %in% multiple_centroid_desas$Clust_Code)),]
row.names(all_centroids) <- all_centroids$Clust_Code
cluster_points <- read.csv("cluster_points_NTT+MMU.csv", header = T)
NTT_Census <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/BPS/BPS_Processing/NTT_with_Census_Data.csv")
Maluku_Census <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/BPS/BPS_Processing/Maluku_with_Census_Data.csv")
MalukuUtara_Census <- read.csv("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/BPS/BPS_Processing/Maluku_Utara_with_Census_Data.csv")
census_all <- rbind.fill(NTT_Census,
Maluku_Census,
MalukuUtara_Census)
desas_with_BIG_data <- unique(cluster_points$IDSP2010)
desa_list <- c(unique(NTT_Census$IDSP2010),
unique(Maluku_Census$IDSP2010),
unique(MalukuUtara_Census$IDSP2010))
desa_gaps <- setdiff(desa_list, desas_with_BIG_data)
nrow(cluster_points)
cluster_points$EI_SubArea <- NA
View(cluster_points)
for (i in 1:nrow(cluster_points))
{
#assign the corresponding EI SubArea value
cluster_code <- cluster_points[i, "Clust_Code"]
cluster_points[i, "EI_SubArea"] <- all_centroids[cluster_code, "EI_SubArea"]
}
View(cluster_points)
cluster_code <- cluster_points[22, "Clust_Code"]
cluster_code
all_centroids[cluster_code, "EI_SubArea"]
typeof(all_centroids)
View(all_centroids)
all_centroids <- as.data.frame(all_centroids)
typeof(all_centroids)
all_centroids$Clust_Code <- str_c(all_centroids$IDSP2010,"99")
all_centroids[cluster_code, "EI_SubArea"]
all_centroids[cluster_code, "EI_SubArea"][1]
View(all_centroids[cluster_code, "EI_SubArea"])
View(all_centroids[cluster_code,])
View(all_centroids[543,])
View(row.names(all_centroids))
View(row.names(cluster_points))
row.names(cluster_points) <- cluster_points$Clust_Code
for (i in 1:nrow(cluster_points))
{
#assign the corresponding EI SubArea value
cluster_code <- cluster_points[i, "Clust_Code"]
cluster_points[i, "EI_SubArea"] <- all_centroids[cluster_code, "EI_SubArea"]
}
View(cluster_points)
View(cluster_code)
cluster_points[5, "EI_SubArea"] <- all_centroids[cluster_code, "EI_SubArea"]
View(cluster_points)
cluster_points[5, "EI_SubArea"]
all_centroids[cluster_code, "EI_SubArea"]
View(all_centroids[cluster_code, "EI_SubArea"])
View(all_centroids)
View(all_centroids[537104001199, "EI_SubArea"])
View(all_centroids[54, "EI_SubArea"])
View(row.names(all_centroids))
View(all_centroids[537101000199, "EI_SubArea"])
View(all_centroids["537101000199", "EI_SubArea"])
typeof(cluster_code)
all_centroids[cluster_code, "EI_SubArea"]
View(desa_gap_fillers)
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude"]
desa_gap_fillers[i, "Latitude"] <- all_centroids[cluster_code, "Latitude"]
desa_gap_fillers[i, "EI_SubArea"] <- all_centroids[cluster_code, "EI_SubArea"]
}
View(desa_gap_fillers)
all_centroids[cluster_code, "EI_SubArea"]
View(all_centroids[cluster_code, "EI_SubArea"])
cluster_code
all_centroids[cluster_code, "EI_SubArea"]
x<-all_centroids[cluster_code, "EI_SubArea"]
x
type(cluster_code)
typeof(cluster_code)
View(all_centroids[cluster_code, "EI_SubArea"])
x<-all_centroids[cluster_code, "EI_SubArea"][1]
x
all_centroids[cluster_code, "EI_SubArea"]
View(all_centroids)
View(desa_gap_fillers)
desa_gap_fillers[i, "EI_SubArea"] <- as.character(all_centroids[cluster_code, "EI_SubArea"])
for (i in 1:nrow(desa_gap_fillers))
{
#assign the corresponding Lat,Long values
cluster_code <- desa_gap_fillers[i, "Clust_Code"]
desa_gap_fillers[i, "Longitude"] <- all_centroids[cluster_code, "Longitude"]
desa_gap_fillers[i, "Latitude"] <- all_centroids[cluster_code, "Latitude"]
desa_gap_fillers[i, "EI_SubArea"] <-  as.character(all_centroids[cluster_code, "EI_SubArea"])
}
View(desa_gap_fillers)
for (i in 1:nrow(cluster_points))
{
#assign the corresponding EI SubArea value
cluster_code <- cluster_points[i, "Clust_Code"]
cluster_points[i, "EI_SubArea"] <- as.character(all_centroids[cluster_code, "EI_SubArea"])
}
View(cluster_points)
table(cluster_points$EI_SubArea)
cluster_code
as.character(all_centroids[cluster_code, "EI_SubArea"])
all_centroids[cluster_code, "EI_SubArea"]
all_centroids[827205100901, "EI_SubArea"]
all_centroids["827205100901", "EI_SubArea"]
colnames(cluster_points)
for (i in 1:nrow(cluster_points))
{
#assign the corresponding EI SubArea value
cluster_code <- str_c(cluster_points[i, "IDSP2010"],99)
cluster_points[i, "EI_SubArea"] <- as.character(all_centroids[cluster_code, "EI_SubArea"]
}
for (i in 1:nrow(cluster_points))
{
#assign the corresponding EI SubArea value
cluster_code <- str_c(cluster_points[i, "IDSP2010"],99)
cluster_points[i, "EI_SubArea"] <- as.character(all_centroids[cluster_code, "EI_SubArea"])
}
View(cluster_points)
table(cluster_points$EI_SubArea)
test <- rbind.fill(desa_gap_fillers, cluster_points)
test$ho_size <- test$DESA_POP/test$NUM_HHOLDS
test$pop <- test$CLUST_POP
View(test)
table(test$EI_SubArea)
unique(test$EI_SubArea)
View(test[which(test$EI_SubArea==NA),])
Regions <- unique(test$EI_SubArea)
View(Regions)
for (i in 1:nrow(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area,str_c(Reguions[i],"-demographic_data_with_centroids_for_gaps.csv"))
}
1:nrow(Regions)
nrow(Regions)
Regions <- unique(test$EI_SubArea)
nrow(Regions)
View(Regions)
Regions[1]
Regions[5]
dim(Regions)
length(Regions)
for (i in 1:length(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area,str_c(Reguions[i],"-demographic_data_with_centroids_for_gaps.csv"))
}
Regions <- unique(test$EI_SubArea)
for (i in 1:length(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area,str_c(Regions[i],"-demographic_data_with_centroids_for_gaps.csv"))
}
View(row.names(test))
for (i in 1:length(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area,str_c(Regions[i],"-demographic_data_with_centroids_for_gaps.csv", row.names = F))
}
for (i in 1:length(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area,str_c(Regions[i],"-demographic_data_with_centroids_for_gaps.csv") row.names = F)
}
Regions <- unique(test$EI_SubArea)
for (i in 1:length(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area,str_c(Regions[i],"-demographic_data_with_centroids_for_gaps.csv") row.names = F)
}
for (i in 1:length(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area, str_c(Regions[i],"-demographic_data_with_centroids_for_gaps.csv"), row.names = F)
}
test$Name <- test$Clust_Code
for (i in 1:length(Regions)){
subset_area <- subset(test, EI_SubArea == Regions[i])
write.csv(subset_area, str_c(Regions[i],"-demographic_data_with_centroids_for_gaps.csv"), row.names = F)
}
View(all_centroids)
table(all_centroids$PLN_Cabang)
cluster_pointsV2 <- read.csv("ShakyUpdate-20140102/All_Settlement_Points_with_Population.csv", header = T)
View(cluster_pointsV2)
dim(cluster_points)
colnames(cluster_points)
colnames(cluster_pointsV2)
cluster_points <- read.csv("cluster_points_NTT+MMU.csv", header = T)
colnames(cluster_points)
View(test)
Maluku <- subset(test, PROVINSI == "MALUKU")
View(Maluku)
MalukuUtara <- subset(test, PROVINSI == "MALUKU Utara")
View(MalukuUtara)
MalukuUtara <- subset(test, PROVINSI == "MALUKU UTARA")
View(MalukuUtara)
setwd("~/Dropbox/Indonesia Geospatial Analysis/Data Modeling and Analysis/NPinputs/Dec2013-Preprocessing/20140106")
NTT <- subset(test, PROVINSI == "NUSA TENGGARA TIMUR")
Maluku <- subset(test, PROVINSI == "MALUKU")
MalukuUtara <- subset(test, PROVINSI == "MALUKU UTARA")
write.csv(NTT, "NTT-demographic_data_with_centroids_for_gaps.csv", row.names = F)
write.csv(Maluku, "Maluku-demographic_data_with_centroids_for_gaps.csv", row.names = F)
write.csv(MalukuUtara, "MalukuUtara-demographic_data_with_centroids_for_gaps.csv", row.names = F)
View(MalukuUtara)
